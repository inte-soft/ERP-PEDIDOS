/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.inte_soft.gestionconsumibles.formularios;

import com.inte_soft.gestionconsumibles.controller.TConsumiblesEController;
import com.inte_soft.gestionconsumibles.controller.TConsumiblesMController;
import com.inte_soft.gestionconsumibles.dto.ConsumiblesDtoOt;
import com.inte_soft.gestionconsumibles.dto.PedidoConsumiblesDto;
import com.inte_soft.gestionconsumibles.entity.TipicoConsumiblesElectricos;
import com.inte_soft.gestionconsumibles.entity.TipicoConsumiblesMecanicos;
import com.inte_soft.gestionconsumibles.entity.Usuarios;
import com.inte_soft.gestionconsumibles.util.JTablePrinter;
import java.awt.Frame;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;


/**
 *
 * @author Inte-Soft
 */
public class Consumibles extends javax.swing.JDialog {

    /**
     * Creates new form consumibles
     */
    private String tipoConsumibles;
    private String item;
    private GestionConsumibles gConsumibles;
    private Usuarios usuario;
    private String ot;
    private DefaultTableModel model;
    private TableRowSorter<DefaultTableModel> sorter;
    
    public Consumibles(String tipoConsumibles, String item, GestionConsumibles gConsumibles) {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/logoIcono.png")).getImage());
        this.tipoConsumibles = tipoConsumibles;
        this.item = item;
        this.gConsumibles = gConsumibles;
        this.loadConsumibles(this.tipoConsumibles, this.item);
        modelarTabla();
    }
    public Consumibles(String tipoConsumibles, String item, GestionConsumibles gConsumibles, Usuarios usuario, String ot) {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/logoIcono.png")).getImage());
        this.tipoConsumibles = tipoConsumibles;
        this.item = item;
        this.gConsumibles = gConsumibles;
        this.usuario = usuario;
        this.ot = ot;
        this.loadConsumibles(this.tipoConsumibles, this.item);
        modelarTabla();
    }
    
    public Consumibles(String visualizacion, List<ConsumiblesDtoOt> listcConsumiblesDtoOts, Usuarios usuario, String ot) {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/logoIcono.png")).getImage());
        if(visualizacion.equals("VISUALIZACION")){
            jButton2.setVisible(false);
            jButton3.setVisible(false);
            this.usuario = usuario;
            this.ot = ot;
            //agregar dos columnas a la tabla
        }
        this.loadDespliegue(listcConsumiblesDtoOts);
        modelarTabla();

        
    }



    public void addColumn(){
        this.model.addColumn("Minimo");
        this.model.addColumn("Maximo");
        this.model.addColumn("Observacion");
    }
    
    public Consumibles( List<PedidoConsumiblesDto> listPedidoConsumibleses, Usuarios usuario, String ot) {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/logoIcono.png")).getImage());
            jButton2.setVisible(false);
            jButton3.setVisible(false);
            this.usuario = usuario;
            this.ot = ot;
        modelarTabla();

        addColumn();
        this.verPedido(listPedidoConsumibleses);

    }

    public Consumibles() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/logoIcono.png")).getImage());
        modelarTabla();
    }
    public void modelarTabla(){
        this.model =  (DefaultTableModel) tbListadoConsumibles.getModel();
        this.tbListadoConsumibles.setModel(model);
        this.tbListadoConsumibles.setAutoCreateRowSorter(true);
        sorter = new TableRowSorter<>(model);
        this.tbListadoConsumibles.setRowSorter(sorter);
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbListadoConsumibles = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jBImprimir = new javax.swing.JButton();
        jTextSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextSearchItem = new javax.swing.JTextField();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbListadoConsumibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Codigo", "DescripciÃ³n", "Tipo", "Referencia", "Marca", "Unidad", "Cant"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbListadoConsumibles);
        if (tbListadoConsumibles.getColumnModel().getColumnCount() > 0) {
            tbListadoConsumibles.getColumnModel().getColumn(0).setMinWidth(50);
            tbListadoConsumibles.getColumnModel().getColumn(0).setPreferredWidth(100);
            tbListadoConsumibles.getColumnModel().getColumn(0).setMaxWidth(100);
            tbListadoConsumibles.getColumnModel().getColumn(1).setMinWidth(100);
            tbListadoConsumibles.getColumnModel().getColumn(1).setPreferredWidth(120);
            tbListadoConsumibles.getColumnModel().getColumn(1).setMaxWidth(120);
            tbListadoConsumibles.getColumnModel().getColumn(2).setMinWidth(500);
            tbListadoConsumibles.getColumnModel().getColumn(2).setPreferredWidth(900);
            tbListadoConsumibles.getColumnModel().getColumn(2).setMaxWidth(900);
            tbListadoConsumibles.getColumnModel().getColumn(3).setMinWidth(200);
            tbListadoConsumibles.getColumnModel().getColumn(3).setPreferredWidth(200);
            tbListadoConsumibles.getColumnModel().getColumn(3).setMaxWidth(200);
            tbListadoConsumibles.getColumnModel().getColumn(4).setMinWidth(100);
            tbListadoConsumibles.getColumnModel().getColumn(4).setPreferredWidth(350);
            tbListadoConsumibles.getColumnModel().getColumn(4).setMaxWidth(350);
            tbListadoConsumibles.getColumnModel().getColumn(5).setMinWidth(100);
            tbListadoConsumibles.getColumnModel().getColumn(5).setPreferredWidth(200);
            tbListadoConsumibles.getColumnModel().getColumn(5).setMaxWidth(200);
            tbListadoConsumibles.getColumnModel().getColumn(6).setMinWidth(100);
            tbListadoConsumibles.getColumnModel().getColumn(6).setPreferredWidth(200);
            tbListadoConsumibles.getColumnModel().getColumn(6).setMaxWidth(200);
            tbListadoConsumibles.getColumnModel().getColumn(7).setMinWidth(100);
            tbListadoConsumibles.getColumnModel().getColumn(7).setPreferredWidth(120);
            tbListadoConsumibles.getColumnModel().getColumn(7).setMaxWidth(120);
        }

        jButton2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton2.setText("Subir Pedido");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("LISTADO CONSUMIBLES");

        jButton3.setText("Agregar Consumible");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jBImprimir.setText("Imprimir");
        jBImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImprimirActionPerformed(evt);
            }
        });

        jTextSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextSearchKeyReleased(evt);
            }
        });

        jLabel2.setText("Busqueda");

        jLabel3.setText("Item");

        jTextSearchItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextSearchItemKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(640, 640, 640))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBImprimir))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextSearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jTextSearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jBImprimir))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (this.tbListadoConsumibles.isEditing()) {
                    this.tbListadoConsumibles.getCellEditor().stopCellEditing();
                }
        for (int i = 0; i < this.tbListadoConsumibles.getRowCount(); i++) {
            Object value = this.tbListadoConsumibles.getValueAt(i, 7);
            if (value != null && value instanceof String && !value.equals("0")) {
                String fieldValue = (String) value;
                if (!fieldValue.matches("\\d+(\\.\\d+)?")) {
                    JOptionPane.showMessageDialog(null, "El campo debe contener solo nÃºmeros \n"+
                           " " + this.tbListadoConsumibles.getValueAt(i, 1)+
                           " " + this.tbListadoConsumibles.getValueAt(i, 2) +
                           " este consumible no fue agregado", "Error de validaciÃ³n", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                    Object[] row = new Object[8];
                    row[0] = this.tbListadoConsumibles.getValueAt(i, 0);
                    row[1] = this.tbListadoConsumibles.getValueAt(i, 1);
                    row[2] = this.tbListadoConsumibles.getValueAt(i, 2);
                    row[3] = this.tbListadoConsumibles.getValueAt(i, 3);
                    row[4] = this.tbListadoConsumibles.getValueAt(i, 4);
                    row[5] = this.tbListadoConsumibles.getValueAt(i, 5);
                    row[6] = this.tbListadoConsumibles.getValueAt(i, 6);
                    row[7] = this.tbListadoConsumibles.getValueAt(i, 7);
                    
                    
                    gConsumibles.addConsumiblesPedido(row);
                
                
                
            }
            
        }
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        AgregarConsumible agregarConsumible = new AgregarConsumible(new Frame(), true, this.tbListadoConsumibles);
        agregarConsumible.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jBImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBImprimirActionPerformed
        Date fecha = new Date();
        String header = "OT: " + this.ot + "     " + fecha;
        String footer = "Elabora: " + this.usuario.getNombres() + " " + this.usuario.getApellidos();
        JTablePrinter jTablePrinter = new JTablePrinter();
        jTablePrinter.printTable(tbListadoConsumibles, header, footer);
    }//GEN-LAST:event_jBImprimirActionPerformed

    private void jTextSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextSearchKeyReleased
         filter();
    }//GEN-LAST:event_jTextSearchKeyReleased
    
    private void filter(){
        try {
            sorter.setRowFilter(RowFilter.regexFilter(this.jTextSearch.getText()));
            
        }catch(Exception e){
            
        }
    }
    private void jTextSearchItemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextSearchItemKeyReleased
        filterItem();
    }//GEN-LAST:event_jTextSearchItemKeyReleased
    
    private void filterItem(){
        try {
            sorter.setRowFilter(RowFilter.regexFilter(this.jTextSearchItem.getText(),0));
            
        }catch(Exception e){
            
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Consumibles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Consumibles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Consumibles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Consumibles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Consumibles().setVisible(true);
            }
        });
    }
    
    public void loadConsumibles(String tipoConsumible, String item){        
        DefaultTableModel model =  (DefaultTableModel) tbListadoConsumibles.getModel();
        if (tipoConsumible == "CONSUMIBLES ELECTRICOS") {
            TConsumiblesEController cosnumiblesE = new TConsumiblesEController();
            List<TipicoConsumiblesElectricos> listConsumiblesElectricos = cosnumiblesE.getAll();
            model.setRowCount(0);
            for(TipicoConsumiblesElectricos consumiblesElectricos: listConsumiblesElectricos ){
                Object[] rowData = {
                    item,
                    consumiblesElectricos.getMaster().getCodigo(),
                    consumiblesElectricos.getMaster().getDescripcion(),
                    consumiblesElectricos.getMaster().getTipo(),
                    consumiblesElectricos.getMaster().getReferencia(),
                    consumiblesElectricos.getMaster().getMarca(),
                    consumiblesElectricos.getMaster().getUnidad(),
                };
                model.addRow(rowData);
            }
                
        }else if(tipoConsumible == "CONSUMIBLES MECANICOS") {
            TConsumiblesMController cosnumiblesM = new TConsumiblesMController();
            List<TipicoConsumiblesMecanicos> listConsumiblesMecanicos = cosnumiblesM.getAll();
            model.setRowCount(0);
            for(TipicoConsumiblesMecanicos consumiblesMecanicos: listConsumiblesMecanicos ){
                Object[] rowData = {
                    item,
                    consumiblesMecanicos.getMaster().getCodigo(),
                    consumiblesMecanicos.getMaster().getDescripcion(),
                    consumiblesMecanicos.getMaster().getMarca(),
                    consumiblesMecanicos.getMaster().getTipo(),
                    consumiblesMecanicos.getMaster().getReferencia(),
                    consumiblesMecanicos.getMaster().getUnidad(),
                };
                model.addRow(rowData);
            }
        }
    }
    public void loadDespliegue(List<ConsumiblesDtoOt> listcConsumiblesDtoOts){
        DefaultTableModel model =  (DefaultTableModel) tbListadoConsumibles.getModel();
        for (ConsumiblesDtoOt consumiblesDto : listcConsumiblesDtoOts) {
            Object[] rowData  = {
                consumiblesDto.getCodigo(),
                consumiblesDto.getDescripcion(),
                consumiblesDto.getTipo(),
                consumiblesDto.getReferencia(),
                consumiblesDto.getMarca(),
                consumiblesDto.getUnidad(),
                consumiblesDto.getCantidad()
            };
                
        
            model.addRow(rowData);
        
        }
    }
    public  JTable getTable(){
        return this.tbListadoConsumibles;
    }
           
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBImprimir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextSearch;
    private javax.swing.JTextField jTextSearchItem;
    private javax.swing.JTable tbListadoConsumibles;
    // End of variables declaration//GEN-END:variables

    private void verPedido(List<PedidoConsumiblesDto> listPedidoConsumibleses) {
        DefaultTableModel model =  (DefaultTableModel) tbListadoConsumibles.getModel();
        for (PedidoConsumiblesDto pedidoConsumibles : listPedidoConsumibleses) {
            Object[] rowData  = {
                pedidoConsumibles.getItem(),
                pedidoConsumibles.getCodigo(),
                pedidoConsumibles.getDescripcion(),
                pedidoConsumibles.getTipo(),
                pedidoConsumibles.getReferencia(),
                pedidoConsumibles.getMarca(),
                pedidoConsumibles.getUnidad(),
                pedidoConsumibles.getCantidad(),
                pedidoConsumibles.getMaximo(),
                pedidoConsumibles.getMinimo(),
                pedidoConsumibles.getObservacion()
            };
                
        
            model.addRow(rowData);
        
        }
    }
}
